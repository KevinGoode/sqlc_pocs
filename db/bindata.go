// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/01_appinventory_schema.sql

package db


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemas01appinventoryschemasql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x6f\x82\x40\x10\x85\xef\xfe\x8a\x39\x4a\xba\x5e\x4c\x38\x79" +
	"\x5a\x61\xb4\x9b\x5a\x20\xe3\xda\xd4\xd3\x66\xda\xdd\x54\x13\x10\xc3\x62\xfb\xf7\x1b\x70\x6b\x21\x35\xe9\x71\xde" +
	"\xfb\x78\x33\xbc\x9d\xcd\xe0\xa1\x3a\x7e\x34\xdc\x3a\xd8\x9d\x27\x09\xa1\xd4\x08\x5a\x2e\x37\x08\x87\xda\xb7\x7e" +
	"\x7a\xb4\xa0\xf1\x55\x43\x41\xea\x59\xd2\x1e\x9e\x70\x2f\x4e\x5c\xb9\x5e\x15\xc0\x6d\xc9\xde\x04\x48\x00\x5b\xdb" +
	"\x38\xef\xc3\x54\xb2\x6f\xcd\xe5\x6c\xb9\x75\x16\x96\x6a\xad\x32\x1d\x2d\xc6\x4b\xd8\x7b\xf7\xdf\x16\x10\x77\x82" +
	"\x04\xf8\xba\x72\xa6\x71\x5c\x02\xa1\xdc\x84\xd9\xd6\x97\xb7\xd2\x41\x9a\xef\xba\xf4\x82\x30\x51\x5b\x95\x67\xc1" +
	"\xfd\xe4\xc6\xbc\x1f\xb8\x31\xf3\x38\x86\x17\x49\xc9\xa3\xa4\xe9\x3c\x8e\x23\xb8\x7b\x97\xb9\x55\x10\xd8\xd1\x7d" +
	"\x9d\x69\x7e\x3d\x71\xfd\x64\x20\xac\x72\x42\xb5\xce\x3a\x78\x1a\xe0\x08\x08\x57\x48\x98\x25\xb8\xbd\x15\x1c\x8d" +
	"\xc8\x9f\x98\x11\xda\x8b\x1d\x1a\x2d\x26\xc3\x37\x4b\xeb\xaf\xd3\x24\xa5\xbc\x00\xcd\xdd\x7f\xf7\x91\x8b\xa1\x72" +
	"\x2d\xf8\xaf\x64\x02\xfa\x1d\x00\x00\xff\xff\x56\xa3\x8c\xc7\x02\x02\x00\x00")

func bindataSchemas01appinventoryschemasqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemas01appinventoryschemasql,
		"schemas/01_appinventory_schema.sql",
	)
}



func bindataSchemas01appinventoryschemasql() (*asset, error) {
	bytes, err := bindataSchemas01appinventoryschemasqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "schemas/01_appinventory_schema.sql",
		size: 514,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1580225210, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schemas/01_appinventory_schema.sql": bindataSchemas01appinventoryschemasql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schemas": {Func: nil, Children: map[string]*bintree{
		"01_appinventory_schema.sql": {Func: bindataSchemas01appinventoryschemasql, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
