// Code generated by sqlc. DO NOT EDIT.

package main

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAssetStmt, err = db.PrepareContext(ctx, createAsset); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAsset: %w", err)
	}
	if q.createAssetHostStmt, err = db.PrepareContext(ctx, createAssetHost); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAssetHost: %w", err)
	}
	if q.createHostStmt, err = db.PrepareContext(ctx, createHost); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHost: %w", err)
	}
	if q.deleteAssetStmt, err = db.PrepareContext(ctx, deleteAsset); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAsset: %w", err)
	}
	if q.deleteAssetHostStmt, err = db.PrepareContext(ctx, deleteAssetHost); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAssetHost: %w", err)
	}
	if q.deleteHostStmt, err = db.PrepareContext(ctx, deleteHost); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHost: %w", err)
	}
	if q.getAllAssetHostsStmt, err = db.PrepareContext(ctx, getAllAssetHosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllAssetHosts: %w", err)
	}
	if q.getAllAssetsStmt, err = db.PrepareContext(ctx, getAllAssets); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllAssets: %w", err)
	}
	if q.getAllHostsStmt, err = db.PrepareContext(ctx, getAllHosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllHosts: %w", err)
	}
	if q.getAssetStmt, err = db.PrepareContext(ctx, getAsset); err != nil {
		return nil, fmt.Errorf("error preparing query GetAsset: %w", err)
	}
	if q.getHostStmt, err = db.PrepareContext(ctx, getHost); err != nil {
		return nil, fmt.Errorf("error preparing query GetHost: %w", err)
	}
	if q.getHostsForAssetStmt, err = db.PrepareContext(ctx, getHostsForAsset); err != nil {
		return nil, fmt.Errorf("error preparing query GetHostsForAsset: %w", err)
	}
	if q.updateHostAddressStmt, err = db.PrepareContext(ctx, updateHostAddress); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHostAddress: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAssetStmt != nil {
		if cerr := q.createAssetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAssetStmt: %w", cerr)
		}
	}
	if q.createAssetHostStmt != nil {
		if cerr := q.createAssetHostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAssetHostStmt: %w", cerr)
		}
	}
	if q.createHostStmt != nil {
		if cerr := q.createHostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHostStmt: %w", cerr)
		}
	}
	if q.deleteAssetStmt != nil {
		if cerr := q.deleteAssetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAssetStmt: %w", cerr)
		}
	}
	if q.deleteAssetHostStmt != nil {
		if cerr := q.deleteAssetHostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAssetHostStmt: %w", cerr)
		}
	}
	if q.deleteHostStmt != nil {
		if cerr := q.deleteHostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHostStmt: %w", cerr)
		}
	}
	if q.getAllAssetHostsStmt != nil {
		if cerr := q.getAllAssetHostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllAssetHostsStmt: %w", cerr)
		}
	}
	if q.getAllAssetsStmt != nil {
		if cerr := q.getAllAssetsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllAssetsStmt: %w", cerr)
		}
	}
	if q.getAllHostsStmt != nil {
		if cerr := q.getAllHostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllHostsStmt: %w", cerr)
		}
	}
	if q.getAssetStmt != nil {
		if cerr := q.getAssetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAssetStmt: %w", cerr)
		}
	}
	if q.getHostStmt != nil {
		if cerr := q.getHostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHostStmt: %w", cerr)
		}
	}
	if q.getHostsForAssetStmt != nil {
		if cerr := q.getHostsForAssetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHostsForAssetStmt: %w", cerr)
		}
	}
	if q.updateHostAddressStmt != nil {
		if cerr := q.updateHostAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHostAddressStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createAssetStmt       *sql.Stmt
	createAssetHostStmt   *sql.Stmt
	createHostStmt        *sql.Stmt
	deleteAssetStmt       *sql.Stmt
	deleteAssetHostStmt   *sql.Stmt
	deleteHostStmt        *sql.Stmt
	getAllAssetHostsStmt  *sql.Stmt
	getAllAssetsStmt      *sql.Stmt
	getAllHostsStmt       *sql.Stmt
	getAssetStmt          *sql.Stmt
	getHostStmt           *sql.Stmt
	getHostsForAssetStmt  *sql.Stmt
	updateHostAddressStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createAssetStmt:       q.createAssetStmt,
		createAssetHostStmt:   q.createAssetHostStmt,
		createHostStmt:        q.createHostStmt,
		deleteAssetStmt:       q.deleteAssetStmt,
		deleteAssetHostStmt:   q.deleteAssetHostStmt,
		deleteHostStmt:        q.deleteHostStmt,
		getAllAssetHostsStmt:  q.getAllAssetHostsStmt,
		getAllAssetsStmt:      q.getAllAssetsStmt,
		getAllHostsStmt:       q.getAllHostsStmt,
		getAssetStmt:          q.getAssetStmt,
		getHostStmt:           q.getHostStmt,
		getHostsForAssetStmt:  q.getHostsForAssetStmt,
		updateHostAddressStmt: q.updateHostAddressStmt,
	}
}
